{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-exploring-python","title":"Welcome to Exploring Python","text":"<p>A subsection of BradPenney.io, this site is dedicated to documenting best practices for Python programming. I'll share code examples, tips, and resources that I find helpful along the way. Whether you're a beginner, intermediate, or expert, I hope you'll find something useful (or at least entertaining)! \ud83d\ude04</p>"},{"location":"#topics-to-explore","title":"Topics to Explore \ud83d\udcda","text":"<ul> <li>Python basics and syntax \ud83d\udcdd</li> <li>Useful libraries and frameworks \ud83d\udee0\ufe0f</li> <li>Tips for writing clean, efficient code \ud83e\uddf9</li> <li>Project ideas and tutorials \ud83d\udca1</li> </ul> <p>Stay tuned for updates as I add more content! Thanks for stopping by! \ud83d\udc4b</p>"},{"location":"basics/control_structures/comprehensions/","title":"Comprehensions","text":"<p>Python comprehensions are elegant, concise, and widely used constructs that allow you to create new data structures by transforming and filtering existing iterables. They provide a more readable and often more performant alternative to traditional loops. Comprehensions can be used to create <code>lists</code>, <code>dictionaries</code>, and <code>sets</code>.</p>"},{"location":"basics/control_structures/comprehensions/#basic-comprehension-syntax","title":"Basic Comprehension Syntax","text":"<p>The most basic forms of comprehensions are:</p> Comprehension Syntax<pre><code># List comprehension\nnew_list = [expression for item in iterable]\n\n# Set comprehension\nnew_set = {expression for item in iterable}\n\n# Dictionary comprehension\nnew_dict = {key_expression: value_expression for item in iterable}\n</code></pre> <p>Here's a simple example of each:</p> Basic Comprehensions<pre><code>new_list = [x for x in range(10)]\nnew_set = {x for x in range(10)}\nnew_dict = {k: v for k, v in enumerate(range(10))}\n\nprint(f\"New List: {new_list}\")\nprint(f\"New Set: {new_set}\")\nprint(f\"New Dict: {new_dict}\")\n</code></pre> <p>Output: <pre><code>New List: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nNew Set: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\nNew Dict: {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}\n</code></pre></p>"},{"location":"basics/control_structures/comprehensions/#comprehensions-vs-for-loops","title":"Comprehensions vs For Loops","text":"<p>Comprehensions are essentially a condensed form of <code>for</code> loops with automatic collection building. Both snippets below produce identical results:</p> Comprehensions vs For Loops<pre><code>for_loop_result = []\nfor x in range(5):\n    for_loop_result.append(x**2)\n\ncomprehension_result = [x**2 for x in range(5)]\n\nprint(f\"For Loop Result: {for_loop_result}\")\nprint(f\"Comprehension Result: {comprehension_result}\")\n</code></pre> <p>Output: <pre><code>For Loop Result: [0, 1, 4, 9, 16]\nComprehension Result: [0, 1, 4, 9, 16]\n</code></pre></p> <p>The comprehension is not only more concise (one line vs three), but many Python developers find it more readable and \"Pythonic.\" The expression <code>[x**2 for x in range(5)]</code> reads naturally as \"create a list of x-squared for each x in the range 0 to 4.\"</p>"},{"location":"basics/control_structures/comprehensions/#two-types-of-conditional-logic","title":"Two Types of Conditional Logic","text":"<p>Comprehensions support two distinct types of conditional logic, which serve different purposes and have different syntax positions:</p>"},{"location":"basics/control_structures/comprehensions/#1-filtering-with-if","title":"1. Filtering with <code>if</code>","text":"<p>Use filtering to determine which items to include in the result. The <code>if</code> condition comes after the <code>for</code> clause:</p> Filtering Comprehensions<pre><code># Syntax: [expression for item in iterable if condition]\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\nprint(f\"Even squares: {even_squares}\")\n</code></pre> <p>Output: <pre><code>Even squares: [0, 4, 16, 36, 64]\n</code></pre></p> <p>This reads as \"create x-squared for each x in range 10, but only if x is even.\"</p>"},{"location":"basics/control_structures/comprehensions/#2-conditional-expressions-with-if-else","title":"2. Conditional Expressions with <code>if-else</code>","text":"<p>Use conditional expressions to determine what value each item should have. The <code>if-else</code> expression comes before the <code>for</code> clause:</p> Conditionals Comprehensions<pre><code># Syntax: [value_if_true if condition else value_if_false for item in iterable]\ngrades = [85, 92, 78, 65, 98, 72]\nresults = [\"Pass\" if grade &gt;= 70 else \"Fail\" for grade in grades]\nprint(f\"Results: {results}\")\n</code></pre> <p>Output: <pre><code>Results: ['Pass', 'Pass', 'Pass', 'Fail', 'Pass', 'Pass']\n</code></pre></p> <p>This reads as \"for each grade, assign 'Pass' if grade &gt;= 70, otherwise assign 'Fail'.\"</p>"},{"location":"basics/control_structures/comprehensions/#combining-both-patterns","title":"Combining Both Patterns","text":"<p>You can use both filtering and conditional expressions in the same comprehension:</p> Combining Filtering and Conditionals in Comprehensions<pre><code>categorized_evens = [\n    \"small\" if x &lt;= 5 else \"large\"\n    for x in range(15)\n    if x % 2 == 0\n]\nprint(f\"Categorized evens: {categorized_evens}\")\n</code></pre> <p>Output: <pre><code>Categorized evens: ['small', 'small', 'small', 'large', 'large', 'large', 'large']\n</code></pre></p>"},{"location":"basics/control_structures/comprehensions/#list-comprehensions","title":"List Comprehensions","text":"<p>List comprehensions are the most common type and create new lists by transforming existing iterables:</p> List Comprehensions<pre><code>words = ['apple', 'banana', 'cherry']\nuppercase_words = [word.upper() for word in words]\nprint(f\"Uppercase: {uppercase_words}\")\n\nstudents = [\n    {'name': 'Alice', 'grade': 85},\n    {'name': 'Bob', 'grade': 92},\n    {'name': 'Charlie', 'grade': 78}\n]\nnames = [student['name'] for student in students if student['grade'] &gt;= 80]\nprint(f\"High-performing students: {names}\")\n</code></pre> <p>Output: <pre><code>Uppercase: ['APPLE', 'BANANA', 'CHERRY']\nHigh-performing students: ['Alice', 'Bob']\n</code></pre></p>"},{"location":"basics/control_structures/comprehensions/#set-comprehensions","title":"Set Comprehensions","text":"<p>Set comprehensions work identically to list comprehensions but use curly braces <code>{}</code> and automatically eliminate duplicates:</p> Set Comprehensions<pre><code>emails = ['user1@gmail.com', 'user2@yahoo.com', 'user3@gmail.com',\n          'user4@outlook.com', 'user5@gmail.com', 'user6@yahoo.com']\n\nunique_domains = {email.split('@')[1] for email in emails}\nprint(f\"Unique domains: {unique_domains}\")\n</code></pre> <p>Output: <pre><code>Unique domains: {'gmail.com', 'yahoo.com', 'outlook.com'}\n</code></pre></p>"},{"location":"basics/control_structures/comprehensions/#dictionary-comprehensions","title":"Dictionary Comprehensions","text":"<p>Dictionary comprehensions create key-value pairs and require both a key and value expression:</p> Dictionary Comprehensions<pre><code>words = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nword_lengths = {word: len(word) for word in words}\nprint(f\"Word lengths: {word_lengths}\")\n\nword_categories = {\n    word: 'short' if len(word) &lt;= 5 else 'long' # (1)\n    for word in words\n    if word.startswith(('a', 'e'))\n}\nprint(f\"Vowel words categorized: {word_categories}\")\n\ncelsius_temps = {'morning': 20, 'noon': 25, 'evening': 18}\nfahrenheit_temps = {\n    time: (temp * 9/5) + 32\n    for time, temp in celsius_temps.items()\n}\nprint(f\"Fahrenheit temps: {fahrenheit_temps}\")\n</code></pre> <ol> <li>For readability, it is common practice to break dictionary comprehensions into multiple lines.</li> </ol> <p>Output: <pre><code>Word lengths: {'apple': 5, 'banana': 6, 'cherry': 6, 'date': 4, 'elderberry': 10}\nVowel words categorized: {'apple': 'short', 'elderberry': 'long'}\nFahrenheit temps: {'morning': 68.0, 'noon': 77.0, 'evening': 64.4}\n</code></pre></p>"},{"location":"basics/control_structures/comprehensions/#nested-comprehensions","title":"Nested Comprehensions","text":"<p>Comprehensions can be nested to handle more complex data structures:</p> Nested Comprehensions<pre><code># Flatten a 2D matrix\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened = [num for row in matrix for num in row]\nprint(f\"Flattened matrix: {flattened}\")\n\n# Create a multiplication table\nmultiplication_table = {\n    f\"{i}x{j}\": i * j\n    for i in range(1, 4)\n    for j in range(1, 4)\n}\nprint(f\"Multiplication table: {multiplication_table}\")\n</code></pre> <p>Output: <pre><code>Flattened matrix: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nMultiplication table: {'1x1': 1, '1x2': 2, '1x3': 3, '2x1': 2, '2x2': 4, '2x3': 6, '3x1': 3, '3x2': 6, '3x3': 9}\n</code></pre></p>"},{"location":"basics/control_structures/comprehensions/#best-practices-common-patterns","title":"Best Practices &amp; Common Patterns","text":"<p>Use comprehensions:</p> <ul> <li>Creating a new collection from an existing one</li> <li>The logic is simple and readable</li> <li>You need filtering and/or transformation in one step</li> <li>Performance matters (comprehensions are often faster than equivalent loops)</li> </ul> <p>Avoid comprehensions:</p> <ul> <li>The logic becomes too complex or deeply nested</li> <li>Side effects are needed (printing, file I/O, etc.)</li> <li>The comprehension becomes difficult to read</li> </ul> Common Patterns for Comprehensions<pre><code># Pattern 1: Data extraction and transformation\ndata = [\n    {'name': 'Alice', 'age': 25, 'city': 'NYC'},\n    {'name': 'Bob', 'age': 30, 'city': 'LA'},\n    {'name': 'Charlie', 'age': 35, 'city': 'Chicago'}\n]\n\n# Extract names of people over 25\nmature_names = [person['name'] for person in data if person['age'] &gt; 25]\n\n# Pattern 2: String processing\ntext = \"Hello World Python Programming\"\nword_lengths = {word.lower(): len(word) for word in text.split()}\n\n# Pattern 3: Mathematical operations\ncoordinates = [(1, 2), (3, 4), (5, 6)]\ndistances = [x**2 + y**2 for x, y in coordinates]\n\n# Pattern 4: Conditional categorization\nnumbers = range(1, 21)\nnumber_types = {\n    num: 'even' if num % 2 == 0 else 'odd'\n    for num in numbers\n    if num % 5 != 0  # Exclude multiples of 5\n}\n\nprint(f\"Mature names: {mature_names}\")\nprint(f\"Word lengths: {word_lengths}\")\nprint(f\"Distances: {distances}\")\nprint(f\"Number types: {number_types}\")\n</code></pre>"},{"location":"basics/control_structures/comprehensions/#comprehension-flow-diagram","title":"Comprehension Flow Diagram","text":"<pre><code>flowchart TD\n    A[Start with an iterable] --&gt; B[Iterate through each item]\n    B --&gt; C{Filter condition present?}\n    C --&gt;|No| E[Apply expression to item]\n    C --&gt;|Yes| D{Item passes filter?}\n    D --&gt;|Yes| E\n    D --&gt;|No| F[Skip item]\n    E --&gt; G{Conditional expression&lt;br/&gt;present?}\n    G --&gt;|Yes| H[Apply if-else logic&lt;br/&gt;to determine value]\n    G --&gt;|No| I[Use expression result as value]\n    H --&gt; J[Add to result collection]\n    I --&gt; J\n    F --&gt; K{More items?}\n    J --&gt; K\n    K --&gt;|Yes| B\n    K --&gt;|No| L[Return final collection]</code></pre>"},{"location":"basics/control_structures/controlling_loops/","title":"Controlling Loops","text":"<p>Loops in Python are great for repetition \u2014 but sometimes, you need to take control. Maybe you want to skip ahead, stop early, or do something special at the end. That\u2019s where the loop control keywords <code>continue</code>, <code>break</code>, and <code>else</code> come in.</p> <p>This guide explores how these keywords work and shows you how to use them effectively \u2014 with a few playful examples along the way.</p>"},{"location":"basics/control_structures/controlling_loops/#continuing-a-loop","title":"Continuing a Loop","text":"<p>Sometimes, we want to skip over part of a loop's work for a particular iteration without stopping the whole thing.  That\u2019s where <code>continue</code> comes in \u2014 it tells the loop: \u201cSkip the rest of this turn, move on to the next!\u201d</p> Using Continue to Skip Ahead<pre><code>colours = [\"red\", \"green\", \"blue\", \"orange\"]\n\nfor colour in colours:\n    if colour == \"orange\":\n        print(\"Ugh, orange again? Let's pretend we didn't see that.\")\n        continue\n    print(f\"Ooooh, I totally dig the colour {colour}!\")\n</code></pre> <p>Would result in:</p> <pre><code>Ooooh, I totally dig the colour red!\nOoooh, I totally dig the colour green!\nOoooh, I totally dig the colour blue!\nUgh, orange again? Let's pretend we didn't see that.\n</code></pre> Tip <p>Often, continue can be replaced by simply using an if statement to wrap the block of code. For example: if colour != \"orange\": print(...) would achieve the same result. That said, continue can be helpful for readability \u2014 just use it mindfully.</p>"},{"location":"basics/control_structures/controlling_loops/#breaking-a-loop","title":"Breaking a Loop","text":"<p>Sometimes, we want to stop a loop entirely when something important happens. This is known as abnormal termination, and the <code>break</code> statement is your go-to tool.</p> <p>In the example below, we simulate a bank account that refuses to go into the red:</p> Using Break to Escape a Loop<pre><code>balance = 100\nwithdrawals = [10, 23, 12, 16, 43, 19, 4, 5]\n\nfor withdrawal in withdrawals:\n    print(f\"\ud83d\udce4 Request to withdraw ${withdrawal}...\")\n\n    if (balance - withdrawal) &lt; 0:\n        print(\"\ud83d\udea8 Uh-oh! You're broke. No more money magic today.\")\n        break\n\n    balance -= withdrawal\n    print(f\"\u2705 Success! You withdrew ${withdrawal}. Remaining balance: ${balance}\")\n</code></pre> <p>Would result in:</p> <pre><code>\ud83d\udce4 Request to withdraw $10...\n\u2705 Success! You withdrew $10. Remaining balance: $90\n\ud83d\udce4 Request to withdraw $23...\n\u2705 Success! You withdrew $23. Remaining balance: $67\n\ud83d\udce4 Request to withdraw $12...\n\u2705 Success! You withdrew $12. Remaining balance: $55\n\ud83d\udce4 Request to withdraw $16...\n\u2705 Success! You withdrew $16. Remaining balance: $39\n\ud83d\udce4 Request to withdraw $43...\n\ud83d\udea8 Uh-oh! You're broke. No more money magic today.\n</code></pre> <p>Like the <code>continue</code> statement, <code>break</code> should also be used with caution.  In the example above the same functionality could have been achieved with a <code>while</code> loop.  Use with discretion!</p>"},{"location":"basics/control_structures/controlling_loops/#using-else-with-for-loops","title":"Using Else with For Loops","text":"<p>One of Python\u2019s lesser-known features is the ability to attach an <code>else</code> block to a loop. This block will run only if the loop completes naturally \u2014 that is, not interrupted by a <code>break</code>.</p> <p>Here\u2019s a playful example that builds on our earlier scenario:</p> Adding an Else to a For Loop<pre><code>balance = 200\nwithdrawals = [10, 23, 12, 16, 43, 19, 4, 5]\n\nprint(\"\ud83d\udcb8 Time for a little shopping adventure!\")\n\nfor withdrawal in withdrawals:\n    print(f\"\ud83d\uded2 You spot something for ${withdrawal}...\")\n\n    if (balance - withdrawal) &lt; 0:\n        print(\"\ud83d\ude31 Your wallet gasps in horror \u2014 not enough cash!\")\n        print(\"\ud83d\udc80 The spree ends here, friend.\")\n        break\n\n    balance -= withdrawal\n    print(f\"\ud83c\udf89 Purchase successful! You\u2019ve got ${balance} left in your treasure chest.\")\nelse:\n    print(\"\ud83c\udf8a You made it through your spree without going broke!\")\n</code></pre> <p>Would result in:</p> <pre><code>\ud83d\udcb8 Time for a little shopping adventure!\n\ud83d\uded2 You spot something for $10...\n\ud83c\udf89 Purchase successful! You\u2019ve got $190 left in your treasure chest.\n\ud83d\uded2 You spot something for $23...\n\ud83c\udf89 Purchase successful! You\u2019ve got $167 left in your treasure chest.\n\ud83d\uded2 You spot something for $12...\n\ud83c\udf89 Purchase successful! You\u2019ve got $155 left in your treasure chest.\n\ud83d\uded2 You spot something for $16...\n\ud83c\udf89 Purchase successful! You\u2019ve got $139 left in your treasure chest.\n\ud83d\uded2 You spot something for $43...\n\ud83c\udf89 Purchase successful! You\u2019ve got $96 left in your treasure chest.\n\ud83d\uded2 You spot something for $19...\n\ud83c\udf89 Purchase successful! You\u2019ve got $77 left in your treasure chest.\n\ud83d\uded2 You spot something for $4...\n\ud83c\udf89 Purchase successful! You\u2019ve got $73 left in your treasure chest.\n\ud83d\uded2 You spot something for $5...\n\ud83c\udf89 Purchase successful! You\u2019ve got $68 left in your treasure chest.\n\ud83c\udf8a You made it through your spree without going broke!\n</code></pre> <p>Using else in loops isn\u2019t especially common, but when used well, it can express logic cleanly \u2014 particularly in search loops, or when you want to take special action only if no early exit occurred.</p>"},{"location":"basics/control_structures/for_loops/","title":"<code>for</code> Loops","text":"<p>One of the defining features of computers is their ability to perform repetitive tasks with precision and speed. Python, like many other languages, offers powerful construct known as the <code>for</code> loop to automate and simplify such repetitive actions.</p>"},{"location":"basics/control_structures/for_loops/#what-is-a-for-loop","title":"What is a <code>for</code> Loop?","text":"<p>A <code>for</code> loop is a programming structure that enables you to execute a specific code block repeatedly. It iterates over a sequence of items, performing the same actions for each item. Whether you want to process a list of values, manipulate strings, or iterate over the elements of a dictionary, the <code>for</code> loop is a go-to tool.</p>"},{"location":"basics/control_structures/for_loops/#basic-structure-of-a-for-loop","title":"Basic Structure of a For Loop","text":"<p>In Python, a <code>for</code> loop is defined using the for keyword, followed by a variable (often called an iterator) that represents each item in the sequence, the in keyword, and the sequence itself. The indented code block immediately following the for statement defines what you want to do with each item in the sequence.</p> Basic For Loop<pre><code>for i in range(1,3):\n    # Code to be executed for each item\n    print(i)\n</code></pre> <p>Would return:</p> <pre><code>1\n2\n</code></pre>"},{"location":"basics/control_structures/for_loops/#using-for-loops-with-lists","title":"Using For Loops with Lists","text":"See Also <p>Lists in Python</p> <p>One common use case for <code>for</code> loops is iterating over lists. Lists are collections of data elements, and you can effortlessly process each element in the list using a <code>for</code> loop. Here\u2019s an example:</p> For Loop Iterating Over a List<pre><code>fav_books = ['mastery', 'the signal and the noise', 'the organized mind']\n\nprint(\"My favourite books include:\")\nfor book in fav_books:\n    print(\"   - \" + book.title())\n</code></pre> <p>Results in:</p> <pre><code>My favourite books include:\n   - Mastery\n   - The Signal And The Noise\n   - The Organized Mind\n</code></pre> <p>In the above code, the <code>for</code> loop iterates over the <code>fav_books</code> list, converting each book title to title case and printing it.</p>"},{"location":"basics/control_structures/for_loops/#for-loops-and-the-range-function","title":"For Loops and the <code>range()</code> Function","text":"<p><code>for</code> loops can also work in tandem with the <code>range()</code> function, which generates a sequence of numbers. This is particularly useful when you must repeat an action a specific number of times. However, it\u2019s essential to remember that <code>range()</code> generates numbers up to, but not including the specified end value. Here\u2019s an example:</p> For Loop Using range()<pre><code>for number in range(1,11):\n    print(number)\n</code></pre> <p>Returns:</p> <pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre> <p>This code snippet will print numbers from 1 to 10, emphasizing the importance of being mindful of the common \u201coff by one\u201d error.</p>"},{"location":"basics/control_structures/for_loops/#looping-over-dictionaries","title":"Looping Over Dictionaries","text":"See Also <p>Dictionaries in Python</p> <p>Python\u2019s <code>for</code> loop can efficiently iterate over dictionaries (the <code>dict</code> object)as well. Dictionaries are collections of key-value pairs, and you can loop over their keys, values, or both.  Lets start with a basic <code>dict</code> of names (keys) and phone numbers (values):</p> Basic Dictionary<pre><code>phone_numbers = {\n    \"Jim\": \"+37682929928\",\n    \"Dwight\": \"+423998200919\",\n    \"Michael\": \"+876230123654\"\n    }\n</code></pre> <p>Looping over the keys is the default behaviour, so it is possible to use <code>for name in phone_numbers:</code>.  However, being a bit more explicit is recommended:</p> <p>Iterating Over Dictionary Keys<pre><code>for name in phone_numbers.keys():\n    print(\"## KEYS\")\n    print(name)\n    print(' ')\n</code></pre> Returns:</p> <pre><code>Jim\nDwight\nMichael\n</code></pre> <p>It is also possible to loop over the values of a <code>dict</code> object:</p> Iterating Over Dictionary Values<pre><code># looping over values\nfor number in phone_numbers.values():\n    print(\"## VALUES\")\n    print(number)\n    print(' ')\n</code></pre> <p>Which would return:</p> <pre><code>+37682929928\n+423998200919\n+876230123654\n</code></pre> <p>Depending on the use case, it might also be necessary to return both the keys and the values of a <code>dict</code> object:</p> Iterating Over Dictionary Items (Key and Value)<pre><code>for name, number in phone_numbers.items():\n    print(name, number)\n</code></pre> <p>Resulting with:</p> <pre><code>Jim +37682929928\nDwight +423998200919\nMichael +876230123654\n</code></pre> Tip <p>Note that <code>dict.items()</code> returns a <code>tuple</code> so we unpack it by using two variables in the <code>for</code> loop.</p>"},{"location":"basics/control_structures/functions/","title":"Functions","text":"<p>A function is a reusable block of code that performs a single task and can be used repeatedly in programs.</p>"},{"location":"basics/control_structures/functions/#what-is-a-function","title":"What is a Function?","text":"<p>In Python, a basic function can be declared as follows:</p> Declaring a Basic Function<pre><code>def add_numbers(a:int, b:int) -&gt; int:\n    return a+b\n</code></pre> <p>In the above example, the following items should be noted:</p> <ul> <li>The <code>def</code> keyword declares the start of a function</li> <li>The name of this function is <code>add_numbers</code></li> <li>The function accepts two arguments, <code>a</code> and <code>b</code>.<ul> <li>Each argument can be labelled to show the expected data type (i.e. <code>a:int</code> shows that the   <code>a</code> argument is expecting an <code>int</code>).</li> <li>The <code>-&gt; int</code> declares that the function will <code>return</code> an integer (see below).</li> </ul> </li> <li>Similar to other Python constructs, the declaration line ends with a colon (<code>:</code>).</li> <li>In standard circumstances, a Python function will return a value</li> </ul>"},{"location":"basics/control_structures/functions/#functions-are-repeatable","title":"Functions Are Repeatable","text":"<p>Functions are useful for repeated actions. A famous principle of software development is \u201cDon\u2019t Repeat Yourself\u201d (aka DRY code). As an example, writing the same message to multiple users could be performed as follows:</p> Inefficient Repeated Code<pre><code>user1 = \"Carl\"\nuser2 = \"Jim\"\nuser3 = \"Fred\"\n\nprint(\"Greetings \" + user1 + \", welcome to this program.\")\nprint(\"Greetings \" + user2 + \", welcome to this program.\")\nprint(\"Greetings \" + user3 + \", welcome to this program.\")\n</code></pre> <p>The same lines are being repeated over and over. This could be re-written as a function:</p> Declaring a Function to Avoid Repeated Code<pre><code>def greet(user:str) -&gt; str:\n    return \"Greetings \" + user + \", welcome to this program.\"\n\nuser1 = \"Carl\"\nuser2 = \"Jim\"\nuser3 = \"Fred\"\n\nprint(greet(user1))\nprint(greet(user2))\nprint(greet(user3))\n</code></pre> <p>Both examples will have the same output, but using the function will require less effort from the programmer and will be much more robust and maintainable.</p>"},{"location":"basics/control_structures/functions/#looping-over-a-function","title":"Looping Over a Function","text":"<p>There are often scenarios where we must execute a function multiple times with different inputs. This repetitive task can be efficiently accomplished using a  <code>for</code> loop.</p> <p>Consider a situation where you have a function that performs a specific task or computation, and you need to apply this function to a collection of values or items. Instead of manually calling the function for each input, which can be tedious and error-prone, you can harness the for loop\u2019s capabilities to automate this process. Looping over a function allows you to:</p> <ul> <li>Reuse Code: You can encapsulate a specific functionality within a function and then   effortlessly apply it to multiple data points without duplicating code.</li> <li>Efficiency: Automating repetitive tasks enhances code efficiency, making it easier   to maintain and less prone to errors.</li> <li>Scalability: As your data set grows, using loops to apply a function becomes indispensable,   ensuring your code remains adaptable to various input sizes.</li> </ul> <p>Let\u2019s illustrate this concept with an example using a temperature conversion function, <code>celsius_to_kelvin()</code>, which converts Celsius temperatures to Kelvin:</p> Looping Over a Function<pre><code>def celsius_to_kelvin(cels):\n    return cels + 273.15\n\nfor temperature in [9.1, 8.8, -270.15]:\n    print(celsius_to_kelvin(temperature))\n</code></pre> <p>Would result in:</p> <pre><code>282.25\n281.95\n3.0\n</code></pre> <p>During the loop, <code>celsius_to_kelvin()</code> is executed with the values 9.1, 8.8, and -270.15, respectively, demonstrating the power of automating repetitive tasks through function iteration.</p>"},{"location":"basics/control_structures/if_statements/","title":"<code>if</code> Statements","text":"<p>Decision-making is a fundamental concept in programming, and the <code>if-elif-else</code> statement in Python is a powerful tool for precisely that purpose. These statements allow you to create dynamic, branching logic within your programs. With them, you can instruct your code to take different actions based on specific conditions, making your programs more intelligent and responsive.</p>"},{"location":"basics/control_structures/if_statements/#what-why","title":"What &amp; Why?","text":"<p>An <code>if-elif-else</code> statement is a control structure in Python that enables your program to make choices. It starts with an <code>if</code> statement that checks a particular condition. If that condition is <code>True</code>, a specific block of code is executed. However, if the condition is not met, the program can continue to evaluate other conditions using <code>elif</code> (short for \u201celse if\u201d) statements. These <code>elif</code> clauses allow for multiple conditions to be checked sequentially. Finally, if none of the preceding conditions are <code>True</code>, the else code block is executed.</p> See Also <p><code>if/else</code> statements evaluate to <code>True</code> or <code>False</code> - which are <code>boolean</code> values.  See Booleans for more details.</p> <p>The primary purpose of <code>if-elif-else</code> statements is to introduce decision-making capabilities into your code. They allow your program to adapt and respond to varying situations. There are three examples below of how you might use <code>if-elif-else</code> statements to implement logic:</p>"},{"location":"basics/control_structures/if_statements/#example-1-game-over-conditions","title":"Example 1: Game Over Conditions","text":"<p>If-Else Statement Use Case: Game Over Conditions<pre><code># Determine if a player\u2019s score has reached a winning threshold.\n# If yes, declare a winner; otherwise, continue the game.\n\nplayer_1_score = 47\n\nif (player_1_score &gt;= 100):\n    print(\"YOU WIN!\")\nelse:\n    print(f\"You need {100 - player_1_score} more points to win!\")\n</code></pre> Would return: <pre><code>You need 53 more points to win!\n</code></pre></p>"},{"location":"basics/control_structures/if_statements/#example-2-user-authentication","title":"Example 2: User Authentication","text":"If-Else Statement Use Case: User Authentication<pre><code># Check if a user\u2019s credentials are correct.\n# If they are, grant access; otherwise, deny access.\n\nuser_input_username = \"john_doe\"\nuser_input_password = \"secure_password\"\n\ncorrect_username = \"john_doe\"\ncorrect_password = \"secure_password\"\n\nif user_input_username == correct_username and \\ # (1)\n    user_input_password == correct_password:\n     print(\"Access granted!\")\nelse:\n     print(\"Access denied. Please check your username and password.\")\n</code></pre> <ol> <li>The preceeding backslash is a line continuation.   Both of these conditions are evaluated    in the <code>if</code> statement.</li> </ol> <p>Would result in: <pre><code>Access granted!\n</code></pre></p>"},{"location":"basics/control_structures/if_statements/#example-3-grade-evaluation","title":"Example 3: Grade Evaluation","text":"If-Else Statement Use Case: Grade Evaluation<pre><code># Determine a student's letter grade based on their numeric grade.\n\nstudent_score = 85\n\nif student_score &gt;= 90:\n    print(\"A\")\nelif student_score &gt;= 80:\n    print(\"B\")\nelif student_score &gt;= 70:\n    print(\"C\")\nelif student_score &gt;= 60:\n    print(\"D\")\nelse:\n    print(\"F\")\n</code></pre> <p>Would output:</p> <pre><code>B\n</code></pre> <p>In these examples, <code>if-elif-else</code> statements allow the program to take different actions depending on specific conditions. They provide the flexibility to handle a wide range of scenarios and are essential for building responsive and intelligent software.</p>"},{"location":"basics/control_structures/while_loops/","title":"While Loops","text":"<p>Unlike <code>for</code> loops, <code>while</code> loops are non-deterministic \u2013 the program (and programmer!) doesn't always know how many times the loop will repeat before it finally calls it quits. Instead, it depends on a particular condition \u2013 usually waiting for a <code>boolean</code> to flip from <code>True</code> to <code>False</code>. \ud83d\udd75\ufe0f\u200d\u2642\ufe0f</p> Danger <p>If the condition never becomes <code>False</code>, an infinite loop can be created. If you encounter  an infinite loop, usually <code>Ctrl+C</code> will kill the program (for basic scripting).  (Don't worry, it happens to everyone! Even the pros forget to escape sometimes. \ud83c\udfc3\u200d\u2642\ufe0f\ud83d\udca8)</p> <p>The basic form of a <code>while</code> loop is:</p> Basic While Loop<pre><code>while expr:\n    &lt;code block&gt;\n</code></pre> <p>The expression is evaluated at the start of each loop, and if it is <code>True</code>, the loop will run. It's like a party that keeps going as long as the music is playing! \ud83c\udfb6</p> <p>For example:</p> Loop Until \"Exit\"<pre><code>keep_looping = True\nwhile keep_looping:\n    user_input = input(\"Enter 'exit' to stop the loop: \")\n    if user_input.lower() == 'exit':\n        print(\"Exiting the loop. Goodbye! \ud83d\udc4b\")\n        keep_looping = False\n    else:\n        print(f\"You entered: {user_input} \ud83e\udd16\")\n</code></pre> <p>Until the user enters \"exit\", this loop will keep echoing the user input infinitely. Careful not to get stuck in an infinite loop.</p> Tip <p>It is possible that a <code>while</code> loop will never run if, when it is reached, the condition  it checks is already <code>False</code>. \ud83d\udeab</p> <p>Another common pattern is to check equality and increment/decrement the value on each iteration:</p> Loop Until Value is Zero<pre><code>value = 10\n\nwhile value &gt; 0:\n    print(f\"Current value: {value}\")\n    value -= 1  # Decrease the value by 1 each iteration\nprint(\"Loop has ended. All done! \ud83c\udfc1\")\n</code></pre> Challenge <p>Try writing your own <code>while</code> loop that is different from the examples above! Bonus points for creativity \u2013 maybe count sheep, print emojis, or make a countdown to pizza time! \ud83c\udf55\u23f3</p>"},{"location":"basics/data_structures/dictionaries/","title":"Dictionaries","text":"<p>Dictionaries are possibly the most important iterable data structures in Python \u2014 and they\u2019re everywhere. Even when you don\u2019t see them directly they\u2019re often working behind the scenes, quietly holding things together.</p> <p>For instance, while a string like <code>\"hello\"</code> isn\u2019t itself a dictionary, many Python objects (including strings) use internal dictionaries to store attributes and metadata. And when you assign <code>a = \"my_name\"</code>, you're creating a name (<code>a</code>) that points to a string object \u2014 which, like most Python objects, has a dictionary of attributes under the hood.</p> <p>The real magic of dictionaries is association. Linking keys to values (<code>key: value</code>) creates fast and flexible lookups. Want to find a user\u2019s email by their username? Dictionary. Want to count how many times something appears? Dictionary.</p> <p>If you\u2019ve used other programming languages, you might have heard these referred to as associative arrays, hash maps, or just maps. It\u2019s the same core idea: match a key to a value. Think of it like an old-school phone book \u2014 you know the name, and the dictionary gives you the number.</p> <p>Dictionaries are a much less compute-intensive way to associate two values than keeping those values in two lists (where the order is guaranteed).  In fact, the lookup speed of a dictionary is not affected by its size!</p> Tip <p>Every key in a dictionary must be unique and hashable.  In practical terms, this means you can't use a mutable object as keys - so you can't use a <code>list</code> or a <code>dict</code> as as a key in a dictionary. This will throw a <code>TypeError</code> exception. Mutable objects can be assigned as values. For example, trying to assign the list <code>engine_parts</code> with <code>dream_car['engine_parts'] = 563</code>throws an error:</p> <pre><code>Traceback (most recent call last):\nFile \"/home/brad/Documents/exploring_python/basics/data_structures/dictionaries.py\", line 17, in &lt;module&gt;\n    dream_car[engine_parts] = 563\n    ~~~~~~~~~~^^^^^^^^^^^^^^\nTypeError: unhashable type: 'list'\n</code></pre> <p>The data type of a dictionary in Python is <code>dict</code>, and they're iterable, even though they're not a sequence type like a <code>list</code> or <code>set</code>. In lists, you can insert a value at a specific index position in the sequence. With dictionaries, position is determined by insertion order\u2014new items are always appended to the end. When iterating over a dictionary (see below), iteration will always happen in insertion order. This isn't an index, but the natural order of dictionaries.</p> Info <p>Prior to Python <code>v3.6</code>, there was no guaranteed order of dictionaries at all. As of <code>v3.6</code>, this changed, and dictionaries are guaranteed to iterate over the insertion order.</p>"},{"location":"basics/data_structures/dictionaries/#creating-a-dictionary","title":"Creating a Dictionary","text":"<p>Dictionaries can be declared with:</p> Creating a Dictionary<pre><code>dream_car = {\n    \"model\": \"Pinto\",\n    \"make\": \"Ford\",\n    \"year\": 1971,\n    \"mileage\": 400,\n}\n</code></pre> <p>To retrieve a value, use square brackets <code>[]</code> and supply a key (not an index like a list):</p> <pre><code>print(f\"Dream car: {dream_car['year']} {dream_car['make']} {dream_car['model']}\")\n</code></pre> <p>Would return:</p> <pre><code>Dream car: 1971 Ford Pinto\n</code></pre>"},{"location":"basics/data_structures/dictionaries/#inserting-or-changing-a-value","title":"Inserting or Changing a Value","text":"<p>You can insert or update a key/value pair using the same square bracket syntax with an assignment:</p> <p>Inserting and Updating Key/Value Pairs<pre><code>dream_car['make'] = \"Ferrari\"\ndream_car['model'] = \"365 GTS/4 Daytona\"\ndream_car['colour'] = \"Rosso Chiaro\"\nprint(f\"Dream car: {dream_car['year']} {dream_car['make']} {dream_car['model']} of the colour {dream_car['colour']}.\")\n</code></pre> This would output:</p> <pre><code>Dream car: 1971 Ferrari 365 GTS/4 Daytona of the colour Rosso Chiaro.\n</code></pre>"},{"location":"basics/data_structures/dictionaries/#deleting-a-keyvalue-pair","title":"Deleting a Key/Value Pair","text":"<p>Removing an entry is as easy as using the <code>del</code> keyword:</p> Deleting a Key/Value Pair<pre><code>del dream_car['colour']\n</code></pre>"},{"location":"basics/data_structures/dictionaries/#avoiding-keyerror-with-get","title":"Avoiding <code>KeyError</code> with <code>get()</code>","text":"<p>Attempting to read or delete a key that doesn\u2019t exist will raise a <code>KeyError</code> exception. For example, attempting to retrieve <code>dream_car['engine']</code> would result in:</p> <pre><code>Traceback (most recent call last):\nFile \"exploring_python/basics/data_structures/dictionaries.py\", line 19, in &lt;module&gt;\n    dream_car['engine']\n    ~~~~~~~~~^^^^^^^^^^\nKeyError: 'engine'\n</code></pre> <p>The <code>dict.get()</code> method tries to find a key in a dictionary and will not raise an error if that key doesn't exist. Even better, you can assign a default value to return if the key is missing (the default is <code>None</code>). So, if you search for a key and it isn't present, the default value will be returned:</p> Creating a Dictionary<pre><code>dream_car = {\n    \"model\": \"Pinto\",\n    \"make\": \"Ford\",\n    \"year\": 1971,\n    \"mileage\": 400,\n}\n\nprint(dream_car.get('engine', 'V8'))\n</code></pre> <p>Returns:</p> <pre><code>V8\n</code></pre> Tip <p>Note that the key/value pair <code>engine: V8</code> isn't inserted into the dictionary. Instead, this one-time value is returned to avoid throwing a <code>KeyError</code>.</p>"},{"location":"basics/data_structures/dictionaries/#clearing-a-dictionary","title":"Clearing a Dictionary","text":"<p>If the data in a dictionary is no longer valuable, but you'd like to keep the same dictionary object, use the <code>clear()</code> method to empty a dictionary without changing the id.</p> Clear a Dictionary but Keep the Object<pre><code>dream_car = {\n    \"model\": \"Pinto\",\n    \"make\": \"Ford\",\n    \"year\": 1971,\n    \"mileage\": 400\n}\n\nprint(f\"Dream Car Object ID: {id(dream_car)}\")\ndream_car.clear()\nprint(f\"Dream Car after clear: {dream_car}\")\nprint(f\"Dream Car Object ID after clear: {id(dream_car)}\")\n</code></pre> <p>Results in:</p> <pre><code>Dream Car Object ID: 140457216790016\nDream Car after clear: {}\nDream Car Object ID after clear: 140457216790016\n</code></pre>"},{"location":"basics/data_structures/dictionaries/#merging-dictionaries","title":"Merging Dictionaries","text":"<p>Dictionaries often store related data, so merging them is a common task. To do this, use the <code>update()</code> method. When you call <code>update()</code>, the dictionary you pass in will merge with the original dictionary: it will update any values with the same key and add any key/value pairs that did not exist in the original dictionary.</p> Merging Dictionaries<pre><code>dream_car = {\n    \"model\": \"Pinto\",\n    \"make\": \"Ford\",\n    \"year\": 1971,\n    \"mileage\": 400\n}\n\ndream_car_engine = {\n    \"engine\": \"V8\",\n    \"horsepower\": 440,\n    \"cylinders\": 8\n}\n\ndream_car.update(dream_car_engine) # (1)\nprint(f\"Dream Car: {dream_car}\")\nprint(f\"Dream Car Engine: {dream_car_engine}\")\n</code></pre> <ol> <li>The <code>update()</code> method is also available, with similar functionality, in    <code>sets</code></li> </ol> <p>Would output:</p> <pre><code>Dream Car: {'model': 'Pinto', 'make': 'Ford', 'year': 1971, 'mileage': 400, 'engine': 'V8', 'horsepower': 440, 'cylinders': 8}\nDream Car Engine: {'engine': 'V8', 'horsepower': 440, 'cylinders': 8}\n</code></pre> <p>Note how <code>dream_car_engine</code> was not modified by the <code>update()</code> function, only <code>dream_car</code>.</p>"},{"location":"basics/data_structures/lists/","title":"Lists","text":"<p>Lists are among Python\u2019s most valuable and frequently used data types, and they are the heart of countless programs. So, what exactly is a <code>list</code>, and why are they so indispensable?</p> <p>In essence, a <code>list</code> is a dynamic and mutable sequence of values. Think of it as a versatile bag storing various items\u2014numbers, words, and even a medley of data types\u2014all within a single container. This flexibility makes lists an invaluable asset for any Python programmer.</p> Tip <p>Closely related to lists are tuples, which are immutable, but can be managed with similar syntax.</p> <p>Let\u2019s explore the concept further with a real-world analogy. Imagine you have a collection of names, distances, and mixed data types like this:</p> Example Python Lists<pre><code>users = [\"Jim\", \"Dwight\", \"Michael\"]\ndistance_in_kms = [32, 97, 51, 403, 21, 53, 81]\nmixed_types = [\"Jim\", 23, 3.14, True, \"Berzerk\"]\n</code></pre> <p>In this example, <code>users</code> contains a <code>list</code> of names of <code>string</code> types, <code>distance_in_kms</code> stores a <code>list</code> of distances in <code>int</code> type, and <code>mixed_types</code> seemingly defies convention by accommodating a diverse set of data types. Lists are compelling because they allow you to organize and manipulate such data effortlessly.</p>"},{"location":"basics/data_structures/lists/#accessing-list-items","title":"Accessing List Items","text":"<p>List items can be accessed via their index system like this:</p> Accessing List Items via Indexc<pre><code>users = [\"Jim\", \"Dwight\", \"Michael\"]\nprint(f\"What is your favourite moment when {users[0]} pulls a prank on {users[1]}?\")\n</code></pre> <p>Returns:</p> <pre><code>What is your favourite moment when Jim pulls a prank on Dwight?\n</code></pre> <p>Lists can even be accessed through negative indexing like this:</p> Negative Indexing of Lists<pre><code>users = [\"Jim\", \"Dwight\", \"Michael\"]\nprint(f\"What was one thing that {users[-1]} did you found extra funny?\")\n</code></pre> <p>Outputs:</p> <pre><code>What was one thing that Michael did you found extra funny?\n</code></pre>"},{"location":"basics/data_structures/lists/#adding-and-removing-items-from-lists","title":"Adding and Removing Items from Lists","text":"<p>What makes lists genuinely exceptional is their mutability. Unlike some data types in Python, lists can change and adapt as your program runs. Adding, removing, or modifying elements within a list makes it a dynamic tool for handling evolving data. This adaptability is particularly useful when managing data collections that may grow or shrink in size.</p> Appending Items to Lists<pre><code>users = [\"Jim\", \"Dwight\", \"Michael\"]\nusers.append(\"Pam\")\nprint(f\"We've added {users[-1]} to the list!\")\n</code></pre> <p>Results in: <pre><code>We've added Pam to the list!\n</code></pre></p>"},{"location":"basics/data_structures/membership_testing/","title":"Membership Testing","text":"<p>When working with data structures, one of the most common questions is \"Does this value exist in this data structure?\".  Python comes to the rescue here with two operators: <code>in</code> and <code>not in</code>.</p>"},{"location":"basics/data_structures/membership_testing/#testing-membership-in-sequences","title":"Testing Membership in Sequences","text":"<p>Recall that the sequence types in Python are <code>list</code> and <code>tuples</code>. While they can contain any data type, the order of the elements is guaranteed.</p> <p>Testing membership using the <code>in</code> and <code>not in</code> operators combined with an <code>if</code> statement returns a truthy value (<code>boolean</code>) to indicate membership:</p> Testing Membership in a List<pre><code>fav_books = ['mastery', 'the signal and the noise', 'the organized mind']\n\nif 'mastery' in fav_books:\n    print(\"One of your favourites!\")\nelse:\n    print(\"Maybe something new to consider?\")\n</code></pre> <p>Returns:</p> <pre><code>One of your favourites!\n</code></pre> <p>Using <code>not in</code> works the opposite:</p> Negative Testing Membership in a List<pre><code>fav_books = ['mastery', 'the signal and the noise', 'the organized mind']\n\nif 'discipline is destiny' not in fav_books:\n    print(\"Have your read this one? Maybe you should!\")\nelse:\n    print(\"Ye ole` favourites once again!\")\n</code></pre> <p>Would result in:</p> <pre><code>Have your read this one? Maybe you should!\n</code></pre>"},{"location":"basics/data_structures/membership_testing/#testing-membership-in-dictionaries","title":"Testing Membership in Dictionaries","text":"<p>Dictionaries (the <code>dict</code> data structure) present a little bit of a special case in testing membership, the caveat being you must remember that by default, the test runs against the key of the dictionary, not the entire key/value pair, nor against the value itself.</p> Testing Membership in Dictionary Keys<pre><code>dream_car = {\n    \"model\": \"Pinto\",\n    \"make\": \"Ford\",\n    \"year\": 1971,\n    \"mileage\": 400,\n}\n\nif 'year' in dream_car:\n    print(\"Good to know the year of your dream car!\")\nelse:\n    print(\"What year is your dream car?\")\n</code></pre> <p>Would output:</p> <pre><code>Good to know the year of your dream car!\n</code></pre> <p>If you'd like to test to see if a specific value is in a dictionary, remmember to use the <code>dict.values()</code> method:</p> Negative Testing Membership in Dictionary Values<pre><code>dream_car = {\n    \"model\": \"Pinto\",\n    \"make\": \"Ford\",\n    \"year\": 1971,\n    \"mileage\": 400,\n}\n\nif 'Pinto' not in dream_car.values():\n    print(\"Your dream car isn't a Pinto???!??\")\nelse:\n    print(\"Nothing quite as sweet as a lovely Pinto!\")\n</code></pre> <p>Which would return:</p> <pre><code>Nothing quite as sweet as a lovely Pinto!\n</code></pre>"},{"location":"basics/data_structures/sets/","title":"Sets","text":"<p>In Python, a Sets are a unique data type inspired by mathematical sets.  They are a collection of elements, like a <code>list</code> or <code>dict</code>, but there is no ordering of the elements, and there can be no duplicate elements. With that in mind, it should be clear that the main use of a <code>set</code> is to have unique set of values, ideal when dealing with data prone to duplication, and then testing membership against that <code>set</code>.</p> <p>Like mathematical sets, Python sets support operations such as union, insertion, difference, and containment.</p> Rusty on mathematical sets?  Check out these videos! <p>General Set Theory</p> <p></p> <p>Union &amp; Intersection of Sets</p> <p></p> <p>Difference of Sets</p> <p></p> <p>Set Theory: Containment</p> <p></p> <p>Some programmers think of sets in Python as keyless dictionaries because a set must contain unique values, the order is not (yet) guaranteed, the elements are iterable, and they must be hashable.</p> \"Hashable? <p>A hashable object has a consistent hash value throughout its lifetime, and it can be compared for equality with other objects.</p> <p>A hash value, also known as a message digest or fingerprint, is a unique, fixed-length string produced by a hash function based on an input data.</p> <p>Sets are mutable objects in Python, similar to a<code>list</code>, which, somewhat ironcially, makes sets non-hashable (see note above) and therefore a <code>set</code> cannot be an element of a <code>set</code>. \ud83d\ude15</p> Frozenset <p>Check out the Python Standard Library type FrozenSet if you do require nested sets.</p>"},{"location":"basics/data_structures/sets/#creating-sets","title":"Creating Sets","text":"<p>In Python, a set is declared with curly braces (hence one of the comparison to keyless dictionaries):</p> Creating Sets<pre><code>colours = {\"red\",\"green\",\"blue\", \"orange\", \"red\", \"blue\", \"red\"}\nchess_pieces = set([\"king\",\"queen\",\"knight\",\"knight\", \"bishop\",\"bishop\",\n                    \"rook\", \"rook\", \"pawn\", \"pawn\", \"pawn\", \"pawn\", \"pawn\",\n                    \"pawn\", \"pawn\", \"pawn\"])\nprint(f\"Colours: {colours}\")\nprint(f\"Object type of colours variable: {type(colours)}\")\nprint(f\"Chess Pieces: {chess_pieces}\")\nprint(f\"Object type of chess_pieces variable: {type(chess_pieces)}\")\n</code></pre> <p>Outputs:</p> <pre><code>Colours: {'green', 'blue', 'red', 'orange'}\nObject type of colours variable: &lt;class 'set'&gt;\nChess Pieces: {'pawn', 'knight', 'rook', 'king', 'queen', 'bishop'}\nObject type of chess_pieces variable: &lt;class 'set'&gt;\n</code></pre> <p>Notice how even though duplicate values were passed in, all the elements of the <code>set</code> are unique and duplicates are ignored.</p> Tip <p>To create an empty <code>set</code>, use <code>variable = set()</code>, as <code>variable = {}</code> would create an empty <code>dict</code> object.</p> <p>Sets can use most of the familiar control structures in Python iterables such as <code>for</code> loops and membership testing. Other familiar functions for sequences also work such as <code>set.clear()</code>, <code>set.copy()</code>, <code>len(set)</code>, and so on.</p>"},{"location":"basics/data_structures/sets/#managing-set-elements","title":"Managing Set Elements","text":"<p>Because of their mathematical underpinnings, sets have functionality that other iterables do not.</p>"},{"location":"basics/data_structures/sets/#adding-elements","title":"Adding Elements","text":"<p>Unlike other iterables, there is no <code>append()</code> or <code>insert()</code> methods for sets as the order is not guaranteed.  Instead, sets use <code>add()</code>, and <code>update()</code>:</p> Adding Elements to Sets<pre><code>s1 = {1, 2, 3}\ns2 = {3, 4, 5}\ns1.add(4)\nprint(f\"Set 1 after adding 4: {s1}\")\ns1.update(s2) # (1)\nprint(f\"Set 1 after adding Set 2: {s1}\")\n</code></pre> <ol> <li>Adding two sets is referred to as the union of sets.  In this case, the union of <code>s1</code> and <code>s2</code> is assigned to <code>s1</code>.  See Merging Dictionaries for usage of <code>update()</code> method.</li> </ol> <p>Would output:</p> <pre><code>Set 1 after adding 4: {1, 2, 3, 4}\nSet 1 after adding Set 2: {1, 2, 3, 4, 5}\n</code></pre> <p>It is important to understand that adding the duplicate elements to a <code>set</code> will be ignored as the unique element already exists.</p>"},{"location":"basics/data_structures/sets/#removing-elements","title":"Removing Elements","text":"<p>Python offers two methods to remove elements from a set, <code>remove()</code>, and <code>discard()</code>.</p> Discarding Elements<pre><code>manager_nodes = {\"host1\", \"host7\", \"host12\"}\nprint(f\"Manager Nodes: {manager_nodes}\")\nmanager_nodes.discard(\"host7\")\nmanager_nodes.discard(\"host13\")  # (1)\nprint(f\"Manager Nodes after discarding: {manager_nodes}\")\n</code></pre> <ol> <li>This will not raise an error if \"host13\" is not present.  See tip below.</li> </ol> <p>Would output:</p> <pre><code>Manager Nodes: {'host1', 'host7', 'host12'}\nManager Nodes after discarding: {'host1', 'host12'}\n</code></pre> Remove with Caution! <p>Trying to use the <code>set.remove()</code> method on an element that doesn't exist in the <code>set</code> will result in a <code>KeyError</code> exception.  This may be useful in some situations, it is good to be aware of both options.</p>"},{"location":"basics/data_structures/sets/#comparing-sets","title":"Comparing Sets","text":""},{"location":"basics/data_structures/sets/#subsets-and-supersets","title":"Subsets and Supersets","text":"<p>It is possible to compare sets, returning a <code>boolean</code> value. When all the elements of one set are contained in a second set, the first set is called a subset of the second, and the second is called a superset of the first. Testing for subsets and supersets is common. Below is a table showing comparison operators for raw sets:</p> Statement True/False? Explanation <code>{2,3} &lt; {2,3,4}</code> \u2705 The first set is a subset of the second. <code>{2,3} &lt; {2,3}</code> \u274c The first set is not greater than the second. <code>{2,3} &lt;= {2,3,4}</code> \u2705 The second set is a superset of the first. <code>{2,3} &gt;= {2,3,4}</code> \u274c The first set is not a superset of the second. <p>Rather than having to depend on comparison operators, Python includes useful methods which evaluate set relationships - <code>issubset()</code> and <code>issuperset()</code>:</p> Testing Subsets and Supersets<pre><code>manager_nodes = {\"host1\", \"host7\", \"host12\"}\ncluster_nodes = {\"host1\", \"host2\", \"host3\", \"host4\", \"host5\", \"host6\", \\\n                 \"host7\", \"host8\", \"host9\", \"host10\", \"host11\", \"host12\"}\nprint(f\"Manager Nodes: {manager_nodes}\")\nprint(f\"Cluster Nodes: {cluster_nodes}\")\nprint(f\"Manager Nodes are present in Cluster Nodes: {manager_nodes.issubset(cluster_nodes)}\")\nprint(f\"Cluster Nodes contain all Manager Nodes: {cluster_nodes.issuperset(manager_nodes)}\")\n</code></pre> <p>Yields:</p> <pre><code>Manager Nodes: {'host7', 'host1', 'host12'}\nCluster Nodes: {'host3', 'host12', 'host5', 'host1', 'host2', 'host10', 'host7', 'host6', 'host8', 'host4', 'host9', 'host11'}\nManager Nodes are present in Cluster Nodes: True\nCluster Nodes contain all Manager Nodes: True\n</code></pre>"},{"location":"basics/data_structures/sets/#unions-and-intersections","title":"Unions and Intersections","text":"<p>The union of two sets is all the elements of both sets. The intersection of two sets is only the elements that appear in both sets. It is possible to use logical operators to perform unions and intersections (union is <code>set1 | set2</code>, while intersection is <code>set1 &amp; set2</code>), but Python provides useful methods for these operations. Below is a (somewhat contrived) example:</p> Set Unions and Intersections<pre><code>mechanic_tools = {\"wrench\", \"screwdriver\", \"hammer\", \"pliers\", \"jack\"}\ncarpenter_tools = {\"saw\", \"hammer\", \"chisel\", \"screwdriver\", \"level\"}\nprint(f\"Intersection: {mechanic_tools.intersection(carpenter_tools)}\") # (1)\nprint(f\"Union: {mechanic_tools.union(carpenter_tools)}\")\n</code></pre> <ol> <li>Maybe mechanics and carpenters can get along after all! \ud83d\ude04</li> </ol> <p>Returns:</p> <pre><code>Intersection: {'screwdriver', 'hammer'}\nUnion: {'saw', 'level', 'screwdriver', 'chisel', 'jack', 'hammer', 'pliers', 'wrench'}\n</code></pre>"},{"location":"basics/data_structures/sets/#difference-of-sets","title":"Difference of Sets","text":"<p>The difference of sets is all the elements in one set that do not exist in another. This can be calculated using arithmetic operators - <code>set1 - set2</code> would yield all the elements in <code>set1</code> that are not in <code>set2</code>.  Python also offers handy methods which are more explicit than the arithmetic operators (for most programmers).  To continue our contrive example from above:</p> Difference of Sets<pre><code>mechanic_tools = {\"wrench\", \"screwdriver\", \"hammer\", \"pliers\", \"jack\"}\ncarpenter_tools = {\"saw\", \"hammer\", \"chisel\", \"screwdriver\", \"level\"}\nprint(f\"Mechanic-only Tools: {mechanic_tools.difference(carpenter_tools)}\")\nprint(f\"Carpenter-only Tools: {carpenter_tools.difference(mechanic_tools)}\")\n</code></pre> <p>Returns:</p> <pre><code>Mechanic-only Tools: {'jack', 'pliers', 'wrench'}\nCarpenter-only Tools: {'saw', 'level', 'chisel'\n</code></pre>"},{"location":"basics/data_structures/sets/#disjoint","title":"Disjoint","text":"<p>If two sets do not have any elements in common, it is disjoint, meaning their union is empty. In Python, this can be a useful operation to ensure there is no duplication between two sets of data.</p> Testing Disjoint Sets<pre><code>s1 = {1, 2, 3}\ns2 = {4, 5, 6}\nprint(s1.isdisjoint(s2))\n</code></pre> <p>Returns:</p> <pre><code>True\n</code></pre>"},{"location":"basics/data_structures/slicing_sequences/","title":"Slicing Sequences","text":"<p>Slicing is a powerful technique that allows you to extract specific portions of data from Python sequences such as lists, strings, and tuples. It provides you with the ability to finely control what data you need, whether it\u2019s from the beginning, end, or anywhere in between. This slicing capability is governed by both positive and negative index systems, making it a versatile tool for data manipulation.</p>"},{"location":"basics/data_structures/slicing_sequences/#slicing-index-system","title":"Slicing Index System","text":"<pre><code>Positive index system\n  0      1      2      3      4      5      6\nNegative index system\n -7     -6     -5     -4     -3     -2     -1\n</code></pre> <p>Consider the following index systems for a list:</p> Indexing Sequences<pre><code>days = [\"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n    ]\n\nprint(days[-2])\nprint(days[2])\n</code></pre> <p>Results in:</p> <pre><code>Saturday\nWednesday\n</code></pre> <p>Easily access specific portions of a list using slicing. For example, to access the 2nd, 3rd, and 4th items of a list named days, you can use the following code:</p> Slicing Lists<pre><code>days = [\"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n    ]\n\nsliced_days = days[1:4]\nprint(sliced_days)\n</code></pre> <p>Would output:</p> <pre><code>['Tuesday', 'Wednesday', 'Thursday']\n</code></pre> <p>Retrieve the first three items of a list by simply omitting the starting index:</p> Retrieving First 3 Items in a List<pre><code>days = [\"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n    ]\n\nfirst_three_days = days[:3]\nprint(first_three_days)\n</code></pre> <p>Would result in:</p> <pre><code>['Monday', 'Tuesday', 'Wednesday']\n</code></pre> <p>To get the last three items, you can use negative indexing:</p> Negative Slicing of Lists<pre><code>days = [\"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n    ]\n\nlast_three_days = days[-3:]\nprint(last_three_days)\n</code></pre> <p>Outputs:</p> <pre><code>['Friday', 'Saturday', 'Sunday']\n</code></pre> <p>For everything except the last item, exclude it by slicing until one element from the end:</p> Exclude the Last Item in a List<pre><code>days = [\"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n    ]\n\neverything_but_last = days[:-1]\nprint(everything_but_last)\n</code></pre> <p>Results in:</p> <pre><code>['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n</code></pre> <p>Similarly, you can exclude the last two items:</p> Exclude the Last 2 Items in a List<pre><code>days = [\"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n    ]\n\neverything_but_last_two = days[:-2]\nprint(everything_but_last_two)\n</code></pre> <p>Returns:</p> <pre><code>['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n</code></pre>"},{"location":"basics/data_structures/slicing_sequences/#slicing-strings-and-tuples","title":"Slicing Strings and Tuples","text":"<p>Strings and tuples share the same slicing principles as lists. You can effortlessly extract portions of text from a string or elements from a tuple using slicing. For example, consider this example:</p> Slicing Strings<pre><code>text = \"Hello, World!\"\nsliced_text = text[7:12]\nprint(sliced_text)\n</code></pre> <p>Would output:</p> <pre><code>World\n</code></pre>"},{"location":"basics/data_structures/tuples/","title":"Tuples","text":"<p>Tuples, similar to lists, are a sequenced collection that provides a means to collect and organize data. However, their immutability sets tuples apart \u2013 once created, the elements within a tuple cannot be modified. In this guide, we\u2019ll delve into what tuples are, explore why they are used, and demonstrate some practical use cases for these unchangeable data structures.</p>"},{"location":"basics/data_structures/tuples/#understanding-tuples","title":"Understanding Tuples","text":"<p>A <code>tuple</code> is a collection of elements, just like a list, but it differs crucially: it cannot be changed or altered once declared. This immutability makes tuples an ideal choice for ensuring that the data remains constant throughout your program\u2019s execution. Consider tuples as containers for values that should remain fixed, such as the results obtained from a database SELECT statement in SQL. These results might be crucial to your Python program, but you want to guarantee their integrity and prevent unintentional modifications.</p>"},{"location":"basics/data_structures/tuples/#creating-tuples","title":"Creating Tuples","text":"<p>Creating a tuple in Python is relatively straightforward. Instead of using square brackets, as you would with a list, you use parentheses to define a tuple. Here\u2019s how you can create tuples to store server names and ages:</p> Basic Tuples<pre><code>servers = ('web01', 'web02', 'app01', 'db01')\nages = (12, 19, 32, 41)\n</code></pre> <p>Once you\u2019ve created these tuples, you can access their elements using indexing, just like a list. For example, to retrieve the first element from the ages tuple, you can use:</p> Retrieving Elements in a Tuple<pre><code>print(ages[0])\n</code></pre> <p>Would result in:</p> <pre><code>12\n</code></pre>"},{"location":"basics/data_structures/tuples/#use-cases-for-tuples","title":"Use Cases for Tuples","text":"<p>Now, let\u2019s explore some practical use cases for tuples.</p> <ul> <li>Store Constant Values: Lsuch as mathematical constants or configuration settings,   ensuring that they remain unchanged throughout the program\u2019s execution.</li> <li>Unpacking Contstants - Returning Multiple Values: Functions in Python can return multiple   values as a tuple. This allows you to efficiently pack and unpack data when calling and   receiving function results.</li> </ul> Tuples Use Case: Unpacking Constants<pre><code>def get_user_info(user_id):\n    # retrieve user data\n    return ('John', 'Doe', 30)\n\nfirst_name, last_name, age = get_user_info(123)\n</code></pre> <ul> <li>Database Results: As mentioned earlier, tuples are perfect for holding database query results.   They maintain the integrity of fetched data while allowing you to work with it effectively.</li> <li>Coordinate Pairs: Tuples can represent coordinates or pairs of values, which is handy in   applications involving geometry or mapping.</li> </ul> Tuples Use Case: Coordinate Pairs<pre><code>lat = 43.642567\nlong = -79.387054\ncn_tower = (lat, long) # immutable\nprint(f\"The CN Tower stands at {cn_tower[0]} latitude, and {cn_tower[1]} longitude.\")\n</code></pre> <p>Would return:</p> <pre><code>The CN Tower stands at 43.642567 latitude, and -79.387054 longitude.\n</code></pre>"},{"location":"basics/data_types/booleans/","title":"Booleans","text":"<p>A <code>boolean</code> is akin to a digital switch, representing a binary state that can be \"on\" or \"off\". Booleans, a fundamental data type in Python, provides a simple yet powerful way to express conditions and make decisions in your code. They are the cornerstone of control statements like <code>if/else</code> statements and <code>while</code> loops, allowing you to create dynamic, responsive programs.</p> <p>Booleans can take on one of two values: <code>True</code> or <code>False</code>. These values act as signals to guide your program's logic and flow. Whether you\u2019're validating user input, iterating through data, or responding to external conditions, booleans are your code\u2019s decision-makers.</p> <p>Let\u2019s delve into the world of booleans in Python with some practical examples:</p> Declaring Booleans in Python<pre><code>python_is_awesome = True\nlearning_python_is_hard = False\n</code></pre> <p>In this snippet, we\u2019ve created two <code>boolean</code> variables, <code>python_is_awesome</code> and <code>learning_python_is_hard</code>, which can be thought of as assertions about the state of affairs in our code.</p> <p>Booleans come to life when they are used in conjunction with control statements. For instance:</p> Booleans Control Decision-Making<pre><code>if python_is_awesome:\n    print(\"Python is Awesome!\")\n</code></pre> <p>Returns:</p> <pre><code>Python is Awesome!\n</code></pre> <p>Here, the <code>if</code> statement evaluates whether <code>python_is_awesome</code> is <code>True</code>. If it is, the associated code block executes, and you\u2019ll see the message \"Python is Awesome!\" printed on the screen. This demonstrates how booleans influence the flow of your program based on conditions.</p> <p>Booleans are also indispensable when it comes to loops. Consider the following:</p> Booleans Control Loops<pre><code>kevin_is_a_secret_genius = True\n\nwhile kevin_is_a_secret_genius:\n    print(\"There is no way Kevin is a secret genius\")\n    kevin_is_a_secret_genius = False\n</code></pre> <p>Which would return: <pre><code>There is no way Kevin is a secret genius\n</code></pre></p> <p>In this example, the <code>while</code> loop continues to run as long as <code>kevin_is_a_secret_genius</code> is <code>True</code>. The moment it tries to execute while it is <code>False</code>, the loop terminates. This illustrates how booleans can control the repetition of tasks in your code, allowing you to automate processes efficiently.</p>"},{"location":"basics/data_types/floats/","title":"Floats","text":"<p>While integers (whole numbers) are well-suited for many tasks, there are situations where precision beyond whole numbers is required. A <code>float</code>, short for \u201cfloating-point number,\u201d is a numeric data type in Python that represents real numbers, including those with decimal points. Unlike integers (represented in Python as an <code>int</code>), which deal only with whole numbers, a <code>float</code> can handle values that have fractional components. For example, the mathematical constant <code>pi</code>, often approximated as 3.14, is a classic example of a <code>float</code> in Python. Consider the following examples:</p> Floating Point Numbers<pre><code>pi = 3.14\nprice = 10.99\ntemperature = 21.05\n</code></pre> <p>Floats are essential because they enable you to work with a wide range of data, especially in scientific, engineering, and financial applications, where precision in calculations is critical. Whether dealing with temperature measurements, currency values, or mathematical constants, floats provide the flexibility to handle real-world data accurately.</p>"},{"location":"basics/data_types/floats/#when-to-use-floats","title":"When to Use Floats","text":"<p>It\u2019s important to note that a <code>float</code> offers precision, but come at a cost \u2014 they occupy more memory (RAM) than integers. Therefore, it\u2019s advisable to use floats only when necessary. If your calculations involve whole numbers, it\u2019s more efficient to use integers. However, modern computers typically have ample RAM, making the memory overhead of floats less of a concern than in the past.</p> Sample Use Cases for Floats<pre><code>temperature = 21.05  # A float for temperature\nnumber_of_items = 5  # An integer for quantity\n</code></pre>"},{"location":"basics/data_types/floats/#use-cases-for-floats","title":"Use Cases for Floats","text":"<p>Floats find their applications in a wide array of scenarios. Here are a few everyday use cases where floats shine:</p> <ul> <li>Financial Calculations: Floats are ideal for handling financial data, such as calculating   interest rates, stock prices, or currency exchange rates, which often involve fractional   components.</li> <li>Scientific Research: Scientists use floats to represent experimental data, physical   measurements, and mathematical constants like pi, e, or the gravitational constant.</li> <li>Engineering: Engineers use floats for precise calculations in structural analysis,   fluid dynamics, and electrical circuit design.</li> <li>Geospatial Data: When working with geographic coordinates or GPS data, floats are essential   for accurately representing latitude and longitude.</li> <li>Temperature and Weather: Floats store temperature values, making them suitable for weather forecasting and climate modelling.</li> </ul>"},{"location":"basics/data_types/floats/#using-floats","title":"Using Floats","text":"<p>In Python, performing arithmetic operations with floats is straightforward. If any mathematical operation involves a float, the result will also be a float. For example, multiplying an integer by a float yields a float result:</p> Arithmetic with Floats<pre><code>number_of_items = 5       # Integer\nprice = 10.99             # Float\ntotal_price = number_of_items * price  # Result is a float\nprint(total_price)\n</code></pre> <p>Results in:</p> <pre><code>54.95\n</code></pre>"},{"location":"basics/data_types/ints/","title":"Integers","text":"<p>Integers, data type <code>int</code>, are interpreted as numbers, enabling you to perform standard mathematical operations efficiently. Integers represent whole numbers, crucial for various mathematical and computational tasks.</p> <p>Declaring integers in Python is a breeze, following the same straightforward syntax used for all variables. You assign a value to a variable name using the assignment operator (<code>=</code>). For instance, you can declare integers like this:</p> Declaring Integer Variables<pre><code>rank = 10\neggs = 12\npeople = 3\n</code></pre> Tip <p>Exercise caution when combining an <code>int</code> with a <code>string</code>. To ensure correct output, you must cast the <code>int</code> as a <code>string</code> within the context of the <code>print()</code> statement. For example, when working with the variable <code>my_age = 12</code>, a standard concatenated print statement would need to cast the variable like this: <code>print(\"My age is \" + str(my_age))</code>. This casting operation ensures that the <code>int</code> value of <code>my_age</code> is correctly interpreted as part of the <code>string</code>. Python can also handle this automatically through the use of \"F-strings\".</p> <p>The primary use of an <code>int</code> in Python is mathematical operations. Whether you\u2019re calculating the area of geometric shapes, managing quantities, or working on numerical algorithms, using an <code>int</code> is almost always necessary. You can efficiently perform arithmetic operations like addition, subtraction, multiplication, division, and even exponentiation. Here is a basic example:</p> Python Math<pre><code>length = 10\nwidth = 5\nheight = 3\nbase = 10\nside = 6\nrectangle_area = length * width # a value of 30 would now be assigned to the variable area\ntriangle_area = (0.5 * base * height) # one half base multiplied by height\nsquare_area = side**2 # exponents\nprint(\"The area of a the rectangle is \" + str(rectangle_area))\nprint(f\"The area of the triangle is {triangle_area}\") # using F-strings\nprint(f\"The area of the square is {square_area}\")\n</code></pre> <p>Results in:</p> <pre><code>The area of a the rectangle is 50\nThe area of the triangle is 15.0\nThe area of the square is 36\n</code></pre> See Also <p>Sometimes, the output of two integers results in a floating point number (a number with decimal points).  Python handles these as a <code>float</code>.  See floats for more details.</p>"},{"location":"basics/data_types/strings/","title":"Strings","text":"<p>Strings are a fundamental data type used to represent text. Whether it\u2019s a single character or a paragraph, any text enclosed within either single quotes (<code>' '</code>) or double quotes (<code>\" \"</code>) is considered a <code>string</code> in Python. Strings serve as the building blocks for text manipulation, and Python equips us with a rich set of built-in methods, or manipulators, to operate on strings. You can perform operations like changing letter cases, slicing (and more) to manipulate and extract valuable information from text data.</p> <p>Creating a <code>string</code> is straightforward. You assign any alphanumeric value inside single or double quotes to a variable name using the assignment operator (<code>=</code>):</p> Declaring Basic Strings<pre><code>name = \"Brad\"\nlocation = 'Halifax'\noccupation = 'Kubernetes Guy'\n</code></pre> Tip <p>Strings can be enclosed in either single quotes ('') or double quotes (\"\"), allowing you flexibility in your code. Moreover, if a string needs to contain both types of quotes, you can use the backslash (<code>\\</code>) as an escape character to ensure Python interprets the characters correctly.</p>"},{"location":"basics/data_types/strings/#concatenating-strings","title":"Concatenating Strings","text":"<p>Strings can be combined with simple plus (<code>+</code>) signs:</p> Basic Concatenation<pre><code>first_name = \"Albert\"\nlast_name = \"Einstien\"\nprint(\"There was a famous scientist named \" + first_name + \" \" + last_name + \".\")\n</code></pre> <p>Would output:</p> <pre><code>There was a famous scientist named Albert Einstien.\n</code></pre>"},{"location":"basics/data_types/strings/#f-strings","title":"F-Strings","text":"<p>Introduced in version 3.6 (3.13.3 is current as of Summer 2025), \u201cF-Strings\u201d are a much-improved way to build strings in Python. Simply precede a string with f before the opening quotation. Then, any variable can be surrounded by curly braces {}, removing the need to cast variables of various types. For example:</p> F-Strings<pre><code>name = \"Jim\"\nage = 32\nprint(f\"My name is {name} and I am {age} years old!\")\n</code></pre> <p>Would produce:</p> <pre><code>My name is Jim and I am 32 years old!\n</code></pre>"},{"location":"basics/data_types/strings/#string-methods","title":"String Methods","text":"<p>Strings can accept methods which alter the contents of the string. Some examples of string methods that are built into Python include:</p> Sample String Methods<pre><code>book_title = \"mastery by Robert greene\"\nprint(book_title.upper())\nprint(book_title.lower())\nprint(book_title.title())\nprint(book_title.capitalize())\n</code></pre> <p>Returns:</p> <pre><code>MASTERY BY ROBERT GREENE\nmastery by robert greene\nMastery by Robert Greene\nMastery by robert greene\n</code></pre>"},{"location":"basics/data_types/strings/#adding-removing-whitespace","title":"Adding &amp; Removing Whitespace","text":"<p>Special characters can be added to strings that add whitespace. These include:</p> <ul> <li><code>\\t</code> which adds a tab (4 spaces)</li> <li><code>\\n</code> which adds a newline</li> </ul> Adding Tabs and New Lines to Output<pre><code>print(\"Hello, I'm \\t \\t Brad!\")\nprint(\"and you are learning \\n \\t Python\")\n</code></pre> <p>Returns:</p> <pre><code>Hello, I'm       Brad!\nand you are learning\n     Python\n</code></pre> <p>Whitespace can also be stripped out using string methods. These include <code>strip()</code> (both sides), <code>rstrip()</code> (right side), and <code>lstrip()</code> (left side).</p> Stripping Whitespace in Strings<pre><code>name = \"      Albert Einstein       \"\nprint(\"Hello I am \" + name + \".\") # whitespace remains\nprint(\"Hello I am \" + name.strip() + \".\") # whitespace stripped\nprint(\"Hello I am \" + name.rstrip() + \".\") # whitespace on righ stripped\nprint(\"Hello I am \" + name.lstrip() + \".\") # whitespace on left stripped\n</code></pre> <p>Would result with:</p> <pre><code>Hello I am       Albert Einstein       .\nHello I am Albert Einstein.\nHello I am       Albert Einstein.\nHello I am Albert Einstein       .\n</code></pre> Tip <p>Strings can also be sliced - see Slicing Sequences for more details.</p>"},{"location":"intermediate/iterators_and_generators/","title":"Iterators and Generators","text":"<p>Iterators and generators are important memory-saving tools in Python. They allow you to work with sequences of data (of any size) without loading everything into memory at once. Instead, each member of the iterable is processed individually. This is especially useful when dealing with large datasets or streams of data.</p>"},{"location":"intermediate/iterators_and_generators/#what-is-an-iterable","title":"What is an Iterable?","text":"<p>An iterable is any Python object that can return its members one at a time, allowing it to be iterated over using a loop (see For Loops and While Loops). The order in which iterables are iterated over depends on their type. For example:</p> <ul> <li>Sequentially: Lists,     Tuples, and     Strings.</li> <li>Insertion Order: Dictionaries.</li> <li>Unordered: Sets.</li> </ul> Tip <p>Not everything in Python is iterable. For example, integers and floats are not iterable. If you try to iterate over them, you'll get a <code>TypeError</code> exception.</p> <p>You can check if an object is iterable by using the <code>isinstance()</code> function with the <code>collections.abc.Iterable</code> class.</p> Checking if Iterable<pre><code>from collections.abc import Iterable\ndef is_iterable(obj):\n    return isinstance(obj, Iterable)\n\nprint(is_iterable([1, 2, 3]))\nprint(is_iterable(\"Hello\"))\nprint(is_iterable(42)) # (1)\n</code></pre> <ol> <li>Integers are not iterable, so this will return <code>False</code>.</li> </ol> <p>Would return:</p> <pre><code>True\nTrue\nFalse\n</code></pre>"},{"location":"intermediate/iterators_and_generators/#what-is-an-iterator","title":"What is an Iterator?","text":"<p>An iterator is any object that implements the iterator protocol, which consists of two methods:</p> <ul> <li><code>__iter__()</code>: Returns the iterator object itself.</li> <li><code>__next__()</code>: Returns the next value from the iterator. If there are no more     items, it raises a <code>StopIteration</code> exception.</li> </ul>"}]}